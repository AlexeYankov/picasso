{"version":3,"file":"static/js/304.20f5d71e.chunk.js","mappings":"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","sources":["webpack://posts-fsd-app/./src/entities/post/ui/post-card/styles.module.scss?7243","entities/post/ui/post-card/index.tsx","webpack://posts-fsd-app/./src/entities/post/ui/post-row/styles.module.scss?a81c","entities/post/ui/post-row/index.tsx","entities/post/model/postsSelectors.ts","webpack://posts-fsd-app/./src/features/toggle-post/styles.module.scss?e186","features/toggle-post/ui.tsx","features/infinity-scroll/model/displayedPosts.ts","webpack://posts-fsd-app/./src/pages/posts-list/styles.module.scss?10ca","pages/posts-list/index.tsx","features/infinity-scroll/model/infinity-scroll.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"styles_root__eIu2v\"};","import type {PropsWithChildren} from \"react\";\nimport {Card} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {Post} from \"shared/api\";\n\nimport styles from \"./styles.module.scss\";\n\nexport type PostCardProps = PropsWithChildren<{\n    data: Post;\n    titleHref?: string;\n}> &\n    import(\"antd\").CardProps;\n\nexport const PostCard = ({data, titleHref, children, ...cardProps}: PostCardProps) => {\n    if (!data && !cardProps.loading) return null;\n\n    return (\n        <Card\n            title={`#${cardProps.loading ? \"\" : data?.id + \" \" + data.title}`}\n            className={styles.root}\n            {...cardProps}>\n            {titleHref ? <Link to={titleHref}>{data?.body}</Link> : data?.body}\n            {children}\n        </Card>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"styles_root__QLOZJ\"};","import type {PropsWithChildren, ReactNode} from \"react\";\nimport cn from \"classnames\";\nimport {Row} from \"antd\";\nimport styles from \"./styles.module.scss\";\n\nexport type PostRowProps = PropsWithChildren<{\n    data: import(\"shared/api\").Post;\n    body?: ReactNode;\n}>;\n\nexport const PostRow = ({data, body }: PostRowProps) => {\n\n    return (\n        <Row className={cn(styles.root)}>\n            <div>\n                <span>{data.id}</span>\n                <strong>{data.title}</strong>\n            </div>\n                {body}\n        </Row>\n    );\n};\n","import { RootState } from \"../store\";\n\nexport const currentPosts = (state: RootState) => state.posts.currentPosts;\nexport const post = (state: RootState) => state.posts.post;\nexport const posts = (state: RootState) => state.posts.posts;","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"styles_root__WLRVr\",\"text\":\"styles_text__Yr4-P\"};","import styles from \"./styles.module.scss\";\nimport {Link} from \"react-router-dom\";\n\nexport type TogglePostProps = {\n    postId: number;\n    text: string;\n    titleHref: number;\n};\n\nexport const TogglePost = ({postId, text}: TogglePostProps) => {\n    return (\n        <div className={styles.root}>\n            <span className={styles.text}>{text}</span>\n            <span>\n                <Link to={`${postId}`}>Просмотр</Link>\n            </span>\n        </div>\n    );\n};\n","const headerPos = 106;\nconst onePostOption = 104;\nexport const currentDevicePort = window.screen.height + 200;\nexport const currentWindowPort = (screen: number) => screen + 200;\nexport const initialStateContentHeight = (posts: number) => headerPos + onePostOption * posts;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"styles_root__lUH6w\",\"toolbar\":\"styles_toolbar__hqBNo\",\"content\":\"styles_content__W-aMN\"};","import {Layout, Row, Col, Typography, Spin} from \"antd\";\nimport {useEffect, useState} from \"react\";\n\nimport {TogglePost} from \"features/toggle-post\";\nimport {ListItemType, PageContentType} from \"shared/api\";\nimport {useGetPostsQuery} from \"shared/api/typicode/base\";\nimport {useAppDispatch, useAppSelector} from \"entities/post/store\";\nimport {setCurrentPosts, setPosts} from \"entities/post/model\";\nimport {currentPosts, posts} from \"entities/post/model/postsSelectors\";\nimport {PostRow} from \"entities/post\";\nimport {useScrollStatus} from \"features/infinity-scroll/model\";\nimport {initialStateContentHeight} from \"features/infinity-scroll/model/displayedPosts\";\nimport styles from \"./styles.module.scss\";\n\nconst PageContent = ({data, port}: PageContentType) => {\n    const dispatch = useAppDispatch();\n    const postsData = useAppSelector(posts);\n    useEffect(() => {\n        if (port > initialStateContentHeight(20)) {\n            dispatch(setCurrentPosts(postsData.slice(0, 40)));\n        }\n        // соре, не успел придумать функцию принимающую аргумент количество постов * высоту блока\n        if (port > initialStateContentHeight(40)) {\n            dispatch(setCurrentPosts(postsData.slice(0, 60)));\n        }\n        if (port > initialStateContentHeight(60)) {\n            dispatch(setCurrentPosts(postsData.slice(0, 80)));\n        }\n        if (port > initialStateContentHeight(80)) {\n            dispatch(setCurrentPosts(postsData));\n        }\n    }, [port]);\n    return (\n        <>\n            {data.map((el) => {\n                return <ListItemView post={el} key={el.id} />;\n            })}\n        </>\n    );\n};\n\nconst PostsListPage = () => {\n    const dispatch = useAppDispatch();\n    const currentData = useAppSelector(currentPosts);\n    const [pos, setPos] = useState(window.screen.height);\n    const {data, isLoading} = useGetPostsQuery();\n    useEffect(() => {\n        if (data) {\n            const currentPosts = data.slice(0, 20);\n            dispatch(setPosts(data));\n            dispatch(setCurrentPosts(currentPosts));\n        }\n    }, [data]);\n    const port = useScrollStatus(pos);\n    if (isLoading) return <Spin size=\"large\" />;\n    return (\n        <Layout className={styles.root}>\n            <Layout className={styles.toolbar}>\n                <Row justify=\"center\">\n                    <Typography.Title level={1}>Posts List</Typography.Title>\n                </Row>\n            </Layout>\n            <Layout.Content className={styles.content}>\n                <Row gutter={[0, 20]} justify=\"center\">\n                    <PageContent data={currentData} port={+port} />\n                </Row>\n            </Layout.Content>\n        </Layout>\n    );\n};\n\nconst ListItemView = ({post}: ListItemType) => {\n    return (\n        <Col key={post.id} span={24}>\n            <PostRow\n                data={post}\n                body={<TogglePost postId={post.id} text={post.body} titleHref={post.id} />}\n            />\n        </Col>\n    );\n};\n\nexport default PostsListPage;\n","import {useEffect, useState} from \"react\";\nimport {initialStateContentHeight} from \"./displayedPosts\";\n\nexport function useScrollStatus(pos: number) {\n    const [positionY, setPositionY] = useState(pos);\n    const getWindowPosition = () => setPositionY(pos + window.scrollY);\n    useEffect(() => {\n        function setScrollY() {\n            window.addEventListener(\"scroll\", getWindowPosition);\n            return () => {\n                document.removeEventListener(\"scroll\", getWindowPosition);\n            };\n        }\n        setScrollY();\n    }, [positionY]);\n    return positionY;\n}\n"],"names":["PostCard","_ref","data","titleHref","children","cardProps","loading","_jsxs","Card","title","concat","id","className","styles","_jsx","Link","to","body","PostRow","Row","cn","currentPosts","state","posts","TogglePost","postId","text","window","screen","height","initialStateContentHeight","PageContent","port","dispatch","useAppDispatch","postsData","useAppSelector","useEffect","setCurrentPosts","slice","_Fragment","map","el","ListItemView","post","_ref2","Col","span","PostsListPage","currentData","pos","setPos","useState","isLoading","useGetPostsQuery","setPosts","positionY","setPositionY","getWindowPosition","scrollY","addEventListener","useScrollStatus","Spin","size","Layout","justify","Typography","Title","level","Content","gutter"],"sourceRoot":""}